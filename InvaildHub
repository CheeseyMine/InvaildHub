local player = game.Players.LocalPlayer

local ButtonDB = false

local SelectedPlayer;
local lastLocation;

local espToggle;
local selectABase;
local AutoClickDropper;
local WalkspeedSlider;
local JumpPowerSlider;
local toggleDoorCollide;
local toggleEasyFishBar;
local toggleItemEsp;
local toggleItemFarm;

local library = loadstring(game:GetObjects("rbxassetid://7657867786")[1].Source)()
local Wait = library.subs.Wait

local function toggleEsp(bool)
	local function createVisuals(target)
		if target:FindFirstChild("ESP") then return end
		local eTorso = target:FindFirstChild("Torso")
		repeat
			task.wait()
			if not game.Players:FindFirstChild(target.Name) then
				return
			end
			if not eTorso then
				eTorso = target:FindFirstChild("Torso")
			end
		until  eTorso

		local highlight = Instance.new("Highlight")
		highlight.FillColor = Color3.fromRGB(255,255,255)
		highlight.FillTransparency = 0.5
		highlight.OutlineTransparency = 0
		highlight.OutlineColor = Color3.fromRGB(255,255,255)
		highlight.Parent = target
		highlight.Name = "ESP"

		local Overhead = Instance.new("BillboardGui")
		local TextLabel = Instance.new("TextLabel")

		Overhead.Parent = target
		Overhead.Name = "ESP"
		Overhead.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		Overhead.Active = true
		Overhead.Adornee = target:WaitForChild("Torso")
		Overhead.AlwaysOnTop = true
		Overhead.LightInfluence = 1.000
		Overhead.Size = UDim2.new(0, 400, 0, 30)
		Overhead.StudsOffset = Vector3.new(0, 6, 0)

		TextLabel.Parent = Overhead
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel.BorderSizePixel = 0
		TextLabel.Size = UDim2.new(1, 0, 1)
		TextLabel.Font = Enum.Font.SourceSans
		pcall(function ()
			local ehum = target:FindFirstChild("Humanoid")
			local humrp = player.Character:FindFirstChild("HumanoidRootPart")
			local ehumrp = target:FindFirstChild("HumanoidRootPart")
			repeat
				task.wait()
				if not game.Players:FindFirstChild(target.Name) then
					return
				end
				if not ehum then
					ehum = target:FindFirstChild("Humanoid")
				end
				if not ehumrp then
					ehumrp = target:FindFirstChild("HumanoidRootPart")
				end
				if not humrp then
					humrp = player.Character:FindFirstChild("HumanoidRootPart")
				end
			until ehum or ehumrp

			TextLabel.Text = target.Name.." | HP: "..math.floor(ehum.Health).." | Studs: "..math.floor((humrp.Position - ehumrp.Position).Magnitude)
		end)
		TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.TextScaled = true
		TextLabel.TextSize = 14.000
		TextLabel.TextStrokeTransparency = 0.000
		TextLabel.TextWrapped = true

		task.spawn(function ()
			pcall(function()
				repeat
					task.wait()
					local humrp = player.Character:FindFirstChild("HumanoidRootPart")
					local ehumrp = target:FindFirstChild("HumanoidRootPart")
					if not humrp or not ehumrp then continue end
					TextLabel.Text = target.Name.." | HP: "..math.floor(target.Humanoid.Health).." | Studs: "..math.floor((humrp.Position - ehumrp.Position).Magnitude)
				until not Overhead:IsDescendantOf(target)
			end)
		end)
	end

	if bool then
		for _,plrs in pairs(game.Players:GetPlayers()) do
			if plrs ~= player then
				createVisuals(plrs.Character)

				local conn_;
				conn_ = plrs.CharacterAdded:Connect(function (newChar)
					createVisuals(newChar)
				end)

				task.spawn(function ()
					repeat
						task.wait()
					until not espToggle.Value
					conn_:Disconnect()
				end)
			end
		end

		local conn_1;
		conn_1 = game.Players.PlayerAdded:Connect(function (newPlr)
			local conn_;
			conn_ = newPlr.CharacterAdded:Connect(function (newChar)
				createVisuals(newChar)
			end)

			task.spawn(function ()
				repeat
					task.wait()
				until not espToggle.Value
				conn_:Disconnect()
				if conn_1 then
					conn_1:Disconnect()
				end
			end)
		end)
	else
		for _,plrs in pairs(game.Players:GetPlayers()) do
			if plrs ~= player then
				for _,chars in pairs(plrs.Character:GetDescendants()) do
					if chars.Name == "ESP" then
						chars:Destroy()
					end
				end 
			end
		end
	end
end

local Window = library:CreateWindow({
	Name = "Invaild Hub",
	Themeable = {
	Info = ""
	}
})

local GeneralTab = Window:CreateTab({
	Name = "General",
})

-- // General

local GeneralVisualSection = GeneralTab:CreateSection({
	Name = "Visuals"
})

 espToggle = GeneralVisualSection:AddToggle({
	Name = "ESP",
	Flag = "VisualSection_Flag",
	Value = false,
	Callback = function(Value)
		pcall(function()
			toggleEsp(Value)
		end)
	end
})

local GeneralHumanoidSection = GeneralTab:CreateSection({
	Name = "Humanoid"
})

WalkspeedSlider = GeneralHumanoidSection:AddSlider({
	Name = "Walkspeed",
	Flag = "HumanoidSection_WalkspeedFlag",
	Value = 16,
	Min = 0,
	Max = 350,
})

JumpPowerSlider = GeneralHumanoidSection:AddSlider({
	Name = "JumpPower",
	Flag = "HumanoidSection_JumpPowerFlag",
	Value = 50,
	Min = 0,
	Max = 200,
})

GeneralHumanoidSection:AddButton({
	Name = "Set",
	Callback = function()
		local char = player.Character
 
		if not iswindowactive() then return end
		if ButtonDB then return end
		ButtonDB = true
	   
		pcall(function()
			char.Humanoid.UseJumpPower = true

			char.Humanoid.WalkSpeed = WalkspeedSlider.Get()
			char.Humanoid.JumpPower = JumpPowerSlider.Get()
		end)
		
		task.delay(0.1,function()
			ButtonDB = false
		end)
	end
})

GeneralHumanoidSection:AddButton({
	Name = "Reset",
	Callback = function()
		local char = player.Character
 
		if not iswindowactive() then return end
		if ButtonDB then return end
		ButtonDB = true
	   
		pcall(function()
			char.Humanoid.UseJumpPower = true

			char.Humanoid.WalkSpeed = 16
			char.Humanoid.JumpPower = 50
		end)
		
		task.delay(0.1,function()
			ButtonDB = false
		end)
	end
})

-- // Elemental Tycoon

if game.GameId == 10253248401 then
	local ETTab = Window:CreateTab({
		Name = "Elemental Tycoon",
	})
	
	local ETTeleportSection = ETTab:CreateSection({
		Name = "Teleport"
	})
	
	ETTeleportSection:AddButton({
		Name = "TP to Chest",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			lastLocation = char.HumanoidRootPart.CFrame
			for _,v in pairs(workspace.Treasure.Chests:GetChildren()) do
				if v:IsA("Part") then
					if not char:IsDescendantOf(workspace.Characters.Players) then continue end
					char.HumanoidRootPart.CFrame = v.CFrame * CFrame.new(0,0,-3)
	
					task.wait(.25)
	
					local proxmity = v:WaitForChild("ProximityPrompt")
					proxmity.RequiresLineOfSight = false
					fireproximityprompt(proxmity)
				end
			end
	
			char.HumanoidRootPart.CFrame = lastLocation
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	ETTeleportSection:AddButton({
		Name = "TP to Crate",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			lastLocation = char.HumanoidRootPart.CFrame
			for _,v in pairs(workspace:GetChildren()) do
				if v.Name == "BalloonCrate" then
					if not char:IsDescendantOf(workspace.Characters.Players) then continue end
					char.HumanoidRootPart.CFrame = v.Crate.CFrame * CFrame.new(0,0,5)
	
					task.wait(.25)
	
					local proxmity = v.Crate:WaitForChild("ProximityPrompt")
					proxmity.RequiresLineOfSight = false
					fireproximityprompt(proxmity)
				end
			end
	
			char.HumanoidRootPart.CFrame = lastLocation
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	ETTeleportSection:AddButton({
		Name = "TP to Powers",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			lastLocation = char.HumanoidRootPart.CFrame
			for _,v in pairs(workspace.Tycoons:GetDescendants()) do
				if v:IsA("Model")  and string.find(v.Name,"Ability") then
				   if not v.Parent or v.Parent.Name ~= "Assets" or not v:FindFirstChild("Button") then continue end
				   local humrp = player.Character:FindFirstChild("HumanoidRootPart")
				   local toolBeingEquipped = v.Model.Center.SurfaceGui.TextLabel.Text
				   if not humrp then continue end
				   if player.Backpack:FindFirstChild(toolBeingEquipped) or player.Character:FindFirstChild(toolBeingEquipped) then continue end
				   humrp.CFrame = v.Button.CFrame
				   local proxmity = v.Button:WaitForChild("ProximityPrompt")
				   fireproximityprompt(proxmity)
				end
			end
	
			char.HumanoidRootPart.CFrame = lastLocation
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	ETTeleportSection:AddButton({
		Name = "Steal Dollars",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			lastLocation = char.HumanoidRootPart.CFrame
			for _,v in pairs(workspace:GetDescendants()) do
				if v:IsA("Part") and v.Name == "Dollar" then
					local humrp = player.Character:FindFirstChild("HumanoidRootPart")
					if not humrp then continue end
					humrp.CFrame = v.CFrame
					task.wait()
				end
			 end
	
			char.HumanoidRootPart.CFrame = lastLocation
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
end

-- // Nuke Tycoon Nuclear

if game.PlaceId == 7920018625 then
	local NTNTab = Window:CreateTab({
		Name = "Nuke Tycoon Nuclear",
	})
	
	local NTNTeleportSection = NTNTab:CreateSection({
		Name = "Teleport"
	})
	
	NTNTeleportSection:AddButton({
		Name = "Teleport To Gems",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			for _,v in pairs(workspace.RobbingFolder:GetDescendants()) do
				if v:IsA("BoolValue") and v.Name == "Chosen" then
				   if v.Value and v.Parent.Name ~= player.Team.Name then
					   local humrp = player.Character:FindFirstChild("HumanoidRootPart")
					   if not humrp then continue end
					   humrp.CFrame = v.Parent.CFrame
				   end
				end
			end
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	NTNTeleportSection:AddButton({
		Name = "Teleport Back To Base",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			local plrBase = workspace["The Nuke Tycoon Entirely Model"].Tycoons:WaitForChild(player.Team.Name)
			player.Character.HumanoidRootPart.CFrame = plrBase.Essentials.Spawn.CFrame
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	NTNTeleportSection:AddButton({
		Name = "Teleport To Planes",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
	
			local plrBase = workspace["The Nuke Tycoon Entirely Model"].Tycoons:WaitForChild(player.Team.Name)
			local Plane_Spawner = plrBase.PurchasedObjects:FindFirstChild("Plane_Spawner")
		   if Plane_Spawner then
			   player.Character.HumanoidRootPart.CFrame = Plane_Spawner.Korpi.Korpsii.HumanoidRootPart.CFrame * CFrame.new(0,0,-8)
		   else
			   warn("ERROR TELEPORTING TO PLANES: COULDN'T FIND IT!")
		   end
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	NTNTeleportSection:AddButton({
		Name = "Steal Cash Bonus",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			lastLocation =  player.Character.HumanoidRootPart.CFrame
			player.Character.HumanoidRootPart.CFrame = CFrame.new( -820.199646, 347.196136, 329.985718)
			task.wait(0.1)
			player.Character.HumanoidRootPart.CFrame = lastLocation
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	NTNTeleportSection:AddButton({
		Name = "Teleport to Selected Base",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			local getBase = workspace["The Nuke Tycoon Entirely Model"].Tycoons:FindFirstChild(selectABase.Get())
			if getBase then
			   player.Character.HumanoidRootPart.CFrame = getBase.Essentials.Spawn.CFrame
			elseif selectABase.Get() == "Volcano" then
			   player.Character.HumanoidRootPart.CFrame = CFrame.new( -820.199646, 347.196136, 329.985718)
			end
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})
	
	local NTNOtherSection = NTNTab:CreateSection({
		Name = "Other"
	})
	
	NTNOtherSection:AddToggle({
		Name = "Toggle Click Dropper",
		Flag = "NTNOtherSection_ClickDropper",
		Callback = function(Value)
			local plrBase = workspace["The Nuke Tycoon Entirely Model"].Tycoons:WaitForChild(player.Team.Name)
			local detector = plrBase.PurchasedObjects.Mine.Clicker
			if Value then
				task.spawn(function ()
					repeat
						task.wait(1.5)
						fireclickdetector(detector,99999)
					until not AutoClickDropper.Get()
				end)
			end
		end
	})
	
	local stopLoop = false
	toggleDoorCollide = NTNOtherSection:AddToggle({
		Name = "Toggle Door Collision",
		Flag = "DoorCollision_Flag",
		Value = false,
		Callback = function(Value)
			if Value then
				if stopLoop then
					stopLoop = false
				end
				for _,v in pairs(workspace["The Nuke Tycoon Entirely Model"].Tycoons:GetChildren()) do
					local getOwnerDoor = v.PurchasedObjects:FindFirstChild("OwnerDoor")
					local getOfficeDoor = v.PurchasedObjects:FindFirstChild("OfficeDoor")
					task.spawn(function ()
						while task.wait() do
							if stopLoop then
								return
							end
							if getOwnerDoor then
								getOwnerDoor.Left.CanCollide = false
							else
								getOwnerDoor = v.PurchasedObjects:FindFirstChild("OwnerDoor")
							end
							if getOfficeDoor then
								getOfficeDoor.Left.CanCollide = false
							else
								getOfficeDoor = v.PurchasedObjects:FindFirstChild("OfficeDoor")
							end
						end
					end)
				end
			else
				stopLoop = true
	
				for _,v in pairs(workspace["The Nuke Tycoon Entirely Model"].Tycoons:GetChildren()) do
					local getOwnerDoor = v.PurchasedObjects:FindFirstChild("OwnerDoor")
					local getOfficeDoor = v.PurchasedObjects:FindFirstChild("OfficeDoor")
	
					if getOwnerDoor then
						getOwnerDoor.Left.CanCollide = true
					end
					if getOfficeDoor then
						getOfficeDoor.Left.CanCollide = true
					end
				end
			end
		end
	})
	
	local NTNSettingSection = NTNTab:CreateSection({
		Name = "Setting"
	})
	
	selectABase = NTNSettingSection:AddDropdown({
		Name = "Select a Base",
		Flag = "NTNSettingSection_SelectABase",
		Value = "Base 1",
		List = {"Volcano","Base 1","Base 2","Base 3","Base 4","Base 5","Base 6"}
	})
	
	NTNSettingSection:AddSlider({
		Name = "Gem Steal Duration",
		Flag = "NTNSettingSection_StealGemDuration",
		Value = 5,
		Min = 0,
		Max = 5,
		Callback = function(Value)
			for _,v in pairs(workspace.RobbingFolder:GetDescendants()) do
				if v:IsA("ProximityPrompt") then
					v.HoldDuration = Value
				end
			end
		end
	})
end

-- // YBA

if game.GameId == 2809202155 then
	local YBATab = Window:CreateTab({
		Name = "YBA",
	})

	local YBAVisualSection = YBATab:CreateSection({
		Name = "Visuals"
	})

	local function createItemVisual(tool)
		task.wait(.3)
	
		for _,v in pairs(tool:GetDescendants()) do
			if v.Name == "ESP" then
				v:Destroy()
			end
		end
	
		local proxPrompt
		for _,v in pairs(tool:GetChildren()) do
			if v:IsA("ProximityPrompt") and v.Enabled == true then
				proxPrompt = v
				break
			end
		end 
	
		local Overhead = Instance.new("BillboardGui")
		local TextLabel = Instance.new("TextLabel")
	
		Overhead.Parent = tool
		Overhead.Name = "ESP"
		Overhead.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
		Overhead.Active = true
		Overhead.Adornee = tool.PrimaryPart
		Overhead.AlwaysOnTop = true
		Overhead.LightInfluence = 1.000
		Overhead.Size = UDim2.new(0, 400, 0, 30)
		Overhead.StudsOffset = Vector3.new(0, 0, 0)
	
		TextLabel.Parent = Overhead
		TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.BackgroundTransparency = 1.000
		TextLabel.BorderColor3 = Color3.fromRGB(0, 0, 0)
		TextLabel.BorderSizePixel = 0
		TextLabel.Size = UDim2.new(1, 0, 1)
		TextLabel.Font = Enum.Font.SourceSans
		TextLabel.TextColor3 = Color3.fromRGB(255, 255, 255)
		TextLabel.TextScaled = true
		TextLabel.TextSize = 14.000
		TextLabel.TextStrokeTransparency = 0.000
		TextLabel.TextWrapped = true
		pcall(function ()
			TextLabel.Text = proxPrompt.ObjectText.." | Studs: "..math.floor((tool.PrimaryPart.Position - player.Character:WaitForChild("HumanoidRootPart").Position).Magnitude)
		end)
		task.spawn(function ()
			pcall(function ()
				repeat
					task.wait()
		
					local humrp = player.Character:FindFirstChild("HumanoidRootPart")
					if not humrp then continue end
					TextLabel.Text = proxPrompt.ObjectText.." | Studs: "..math.floor((tool.PrimaryPart.Position - humrp.Position).Magnitude)
		
				until not Overhead:IsDescendantOf(tool)
			end)
		end)
	 end

	 local childAddedConn_;
	 toggleItemEsp = YBAVisualSection:AddToggle({
		 Name = "Toggle Item Esp",
		 Flag = "Itemesp_Flag",
		 Value = false,
		 Callback = function(Value)
			if Value then
				for _,v in pairs(workspace.Item_Spawns.Items:GetChildren()) do
					task.spawn(createItemVisual,v)
				end
	
				childAddedConn_ = workspace.Item_Spawns.Items.ChildAdded:Connect(function (child)
					task.spawn(createItemVisual,child)
				end)
			else
				if childAddedConn_ then
					childAddedConn_:Disconnect()
				end
	
				for _,v in pairs(workspace.Item_Spawns.Items:GetDescendants()) do
					if v.Name == "ESP" then
						v:Destroy()
					end
				end
			end
		 end
	 })
end

-- // Fisch

if game.GameId == 5750914919 then
	local FTab = Window:CreateTab({
		Name = "Fisch",
	})

	local FischTeleportSection = FTab:CreateSection({
		Name = "Teleport"
	})

	local FischOtherSection = FTab:CreateSection({
		Name = "Other"
	})

	local FischSettingsSection = FTab:CreateSection({
		Name = "Settings"
	})

	if not player:GetAttribute("AlreadyLoaded_") then
		player:SetAttribute("AlreadyLoaded_",true)

		game:GetService("ReplicatedStorage").resources.replicated.merchant["Merchant Boat"].ModelStreamingMode = "Persistent"
		lastLocation =  player.Character.HumanoidRootPart.CFrame

		for _,v in pairs(workspace.world.spawns.TpSpots:GetChildren()) do
			if v:IsA("Part") then
				task.wait(0.025)

				player.Character.HumanoidRootPart.CFrame = v.CFrame
			
				for _,npc in pairs(workspace.world.npcs:GetChildren()) do
					if npc:IsA("Model") then
						npc.ModelStreamingMode = "Persistent"
					end
				end
			end
		end 
	end

	local islandList = {}
	for _,v in pairs(workspace.world.spawns:GetChildren()) do
		if v:IsA("Folder") then
			if v.Name == "TeleportDelay" or v.Name == "TpSpots" then continue end
			table.insert(islandList,v.Name)

			if not player:GetAttribute("AlreadyLoaded_") then
				task.wait(0.025)

				player.Character.HumanoidRootPart.CFrame = v:WaitForChild("spawn").CFrame
			
				for _,npc in pairs(workspace.world.npcs:GetChildren()) do
					if npc:IsA("Model") then
						npc.ModelStreamingMode = "Persistent"
					end
				end
			end
		end
	end 

	if lastLocation then
		player.Character.HumanoidRootPart.CFrame = lastLocation
	end

	local selectAIsland = FischSettingsSection:AddDropdown({
		Name = "Select a Location",
		Flag = "FischSettingsSection_SelectAIsland",
		Value = "Moosewood",
		List = islandList
	})

	local selectAIMerchant = FischSettingsSection:AddDropdown({
		Name = "Select a Merchant",
		Flag = "FischSettingsSection_selectAIMerchant",
		Value = "Moosewood",
		List = {"Moosewood","Forsaken Shores","Vertigo","Snowcap","The Depths","Desolate Deep","Sunstone"}
	})

	FischTeleportSection:AddButton({
		Name = "Teleport to Selected Location",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			pcall(function ()
				local getIsland = workspace.world.spawns:FindFirstChild(selectAIsland.Get())
				if getIsland then
					player.Character.HumanoidRootPart.CFrame = getIsland.spawn.CFrame * CFrame.new(0,4.5,0)
				end
			 end)
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})

	FischTeleportSection:AddButton({
		Name = "Teleport to Traveling Merchant",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			pcall(function ()
				local getMerchant = workspace.world.npcs:FindFirstChild("Merchant Boat")
				if getMerchant then
					char.HumanoidRootPart.CFrame = getMerchant:WaitForChild("Travelling Merchant").HumanoidRootPart.CFrame 
				end
			 end)
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})

	FischOtherSection:AddButton({
		Name = "Sell Inventory [Won't sell rare stuff]",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			local event = workspace.world.npcs["Mike Merchant"].merchant.sellall
			event:InvokeServer()
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})

	FischOtherSection:AddButton({
		Name = "Sell Hand",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			local event = workspace.world.npcs["Mike Merchant"].merchant.sell
			event:InvokeServer()
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})

	FischTeleportSection:AddButton({
		Name = "Teleport to Selected Merchant",
		Callback = function()
			local char = player.Character
	
			if not iswindowactive() then return end
			if ButtonDB then return end
			ButtonDB = true
			
			pcall(function ()
				local merchant = selectAIMerchant.Get()
				if merchant == "Moosewood" then
					char.HumanoidRootPart.CFrame = CFrame.new(464.311127, 150.62973, 230.48822)
				elseif merchant == "Forsaken Shores" then
					char.HumanoidRootPart.CFrame = CFrame.new(-2508.26758, 135.790741, 1577.14185)
				elseif merchant == "Vertigo" then
					char.HumanoidRootPart.CFrame = CFrame.new(-138.504807, -515.174377, 1135.73242)
				elseif merchant == "Snowcap" then
					char.HumanoidRootPart.CFrame = CFrame.new(2713.1272, 157.140839, 2377.79932)
				elseif merchant == "The Depths" then
					char.HumanoidRootPart.CFrame = CFrame.new(950.812866, -711.576111, 1265.45996)
				elseif merchant == "Desolate Deep" then
					char.HumanoidRootPart.CFrame = CFrame.new(-1659.4303, -213.979431, -2824.6084)
				elseif merchant == "Sunstone" then
					char.HumanoidRootPart.CFrame = CFrame.new(-928.85614, 131.078827, -1108.20117)
				end
			 end)
			
			task.delay(0.1,function()
				ButtonDB = false
			end)
		end
	})

	local childAddedConn_2;
	toggleEasyFishBar = FischSettingsSection:AddToggle({
		Name = "Toggle Easy Fish Bar",
		Flag = "ToggleEasyFishBar_Flag",
		Value = false,
		Callback = function(Value)
			if Value then
				childAddedConn_2 = player.PlayerGui.ChildAdded:Connect(function (child)
					if child.Name == "reel" then
						task.wait(.25)
						child.bar.playerbar.Size = UDim2.new(1, 0, 1.3, 0)
					end
				end)
			else
				if childAddedConn_2 then
					childAddedConn_2:Disconnect()
				end
			end
		end
	})

	local characterAddedConn_;
	local toggleOxygen = FischSettingsSection:AddToggle({
		Name = "Toggle Oxygen",
		Flag = "Oxygen_Flag",
		Value = true,
		Callback = function(Value)
			if not Value then
				player.Character.client.oxygen.Disabled = true
				characterAddedConn_ = player.CharacterAdded:Connect(function (char)
					char.client.oxygen.Disabled = true
				end)
			else
				player.Character.client.oxygen.Disabled = false
				if characterAddedConn_ then
					characterAddedConn_:Disconnect()
				end
			end
		end
	})
end
